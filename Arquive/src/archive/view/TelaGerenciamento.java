/**
 * Arquive
 *
 * Equipe desenvolvedora do sistema Arquive para Estrutura de Arquivos
 * Universidade Estadual de Campinas - 2017
 */
package archive.view;

import archive.controller.ControladorArchive;
import archive.exceptions.CabecalhoCorrompidoException;
import archive.exceptions.CabecalhoEsgotadoException;
import archive.model.Archive;
import archive.model.Cabecalho;
import archive.model.ItemCabecalho;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayList;
import java.util.List;
import java.util.Map.Entry;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

public class TelaGerenciamento extends javax.swing.JFrame {

    private final Archive archive;

    private static final Color COR_FUNDO_BOTOES = new Color(33, 150, 243);

    private static final Color COR_LETRA_BOTOES = new Color(255, 255, 255);

    private static final Color COR_FUNDO_SELECAO = new Color(187, 222, 251);

    private final List<Integer> indicesSelecionados = new ArrayList<>();

    /**
     * Lista de nomes e informação dos arquivos. Cujo conteúdo está sendo
     * exibido na janela
     */
    private final List<Entry<String, String>> conteudoLista = new ArrayList<>();

    /**
     * Creates new form TelaInicial
     *
     * @param archive
     */
    public TelaGerenciamento(Archive archive) {
        initComponents();

        this.archive = archive;

        setLocationRelativeTo(null);

        inicializar();
    }

    private void inicializar() {
        // Adicionar listener de eventos à lista
        lista.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                boolean possuiSelecao = false;
                indicesSelecionados.clear();

                // Encontrar índices selecionados
                int minIndex = event.getFirstIndex();
                int maxIndex = event.getLastIndex();

                for (int i = minIndex; i <= maxIndex; i++) {
                    if (lista.isSelectedIndex(i)) {
                        // Item de índice i está selecionado
                        possuiSelecao = true;
                        indicesSelecionados.add(i);
                    }
                }

                if (!possuiSelecao) {
                    // Sem seleção
                    botaoExtrair.setEnabled(false);
                    botaoApagar.setEnabled(false);
                } else {
                    botaoExtrair.setEnabled(true);
                    botaoApagar.setEnabled(true);
                }
            }
        });

        atualizarListaArquivos();
    }

    public void atualizarListaArquivos() {
        try {
            ControladorArchive.recarregarCabecalho();
        } catch (CabecalhoCorrompidoException ex) {
            TelasPopup.mostrarMensagem("Arquivo corrompido");
        } catch (IOException ex) {
            TelasPopup.mostrarMensagem("Falha ao tentar acessar o archive");
        }

        Cabecalho cabecalho = archive.getCabecalho();
        conteudoLista.clear();

        for (ItemCabecalho item : cabecalho.getItens()) {
            String status = "";
            switch (item.getStatus()) {
                case Excluido:
                    status = "Excluído";
                    break;
                case Valido:
                    status = "Válido";
                    break;
                case Invalidado:
                    status = "Invalidado";
                    break;
            }

            conteudoLista.add(new SimpleEntry<>(
                    item.getNome(),
                    "Tamanho: " + item.getTamanho() + " bytes"
                    + ", Status: " + status
            ));
        }

        // Gerar array de itens para exibir na tela
        String[] arrayItens = new String[conteudoLista.size()];
        for (int i = 0; i < conteudoLista.size(); i++) {
            Entry item = conteudoLista.get(i);
            arrayItens[i] = item.getKey() + ", " + item.getValue();
        }
        lista.setListData(arrayItens);
    }

    public Archive getArchive() {
        return archive;
    }

    @Override
    public void dispose() {
        try {
            ControladorArchive.fecharSessao();
        } catch (IOException ex) {
        }

        super.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        botaoInserir = new javax.swing.JButton();
        botaoExtrair = new javax.swing.JButton();
        botaoApagar = new javax.swing.JButton();
        botaoAtualizar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lista = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        botaoInserir.setBackground(COR_FUNDO_BOTOES);
        botaoInserir.setForeground(COR_LETRA_BOTOES);
        botaoInserir.setText("Inserir um arquivo");
        botaoInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoInserirActionPerformed(evt);
            }
        });
        jPanel1.add(botaoInserir);

        botaoExtrair.setBackground(COR_FUNDO_BOTOES);
        botaoExtrair.setForeground(COR_LETRA_BOTOES);
        botaoExtrair.setText("Extrair selecionados");
        botaoExtrair.setEnabled(false);
        botaoExtrair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExtrairActionPerformed(evt);
            }
        });
        jPanel1.add(botaoExtrair);

        botaoApagar.setBackground(COR_FUNDO_BOTOES);
        botaoApagar.setForeground(COR_LETRA_BOTOES);
        botaoApagar.setText("Apagar selecionados");
        botaoApagar.setEnabled(false);
        botaoApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoApagarActionPerformed(evt);
            }
        });
        jPanel1.add(botaoApagar);

        botaoAtualizar.setBackground(COR_FUNDO_BOTOES);
        botaoAtualizar.setForeground(COR_LETRA_BOTOES);
        botaoAtualizar.setText("Atualizar lista");
        botaoAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAtualizarActionPerformed(evt);
            }
        });
        jPanel1.add(botaoAtualizar);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        lista.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        lista.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        lista.setFixedCellHeight(20);
        lista.setSelectionBackground(COR_FUNDO_SELECAO);
        jScrollPane1.setViewportView(lista);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoExtrairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExtrairActionPerformed
        File local;

        do {
            local = TelasPopup.obterDiretorioParaSalvar();

            if (local == null) {
                // Nenhum diretorio selecionado (usuário cancelou)
                return;
            }

            if (!local.isDirectory()) {
                TelasPopup.mostrarMensagem("Por favor, escolha um diretório");
            }
        } while (!local.isDirectory());

        try {
            List<String> nomes = new ArrayList<>();
            for (Integer indice : indicesSelecionados) {
                nomes.add(conteudoLista.get(indice).getKey());
            }

            ControladorArchive.extrairArquivos(nomes, local);
        } catch (IOException ex) {
            TelasPopup.mostrarMensagem("Falha ao extrair algum dos arquivos");
        }

        atualizarListaArquivos();
    }//GEN-LAST:event_botaoExtrairActionPerformed

    private void botaoInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoInserirActionPerformed
        File[] arquivos = TelasPopup.obterArquivosParaAbrir();

        if (arquivos == null || arquivos.length == 0) {
            // Nenhum arquivo selecionado
            return;
        }

        try {
            for (int i = 0; i < arquivos.length; i++) {
                File arquivo = arquivos[i];
                ControladorArchive.inserirArquivo(arquivo);
            }
        } catch (IOException ex) {
            TelasPopup.mostrarMensagem("Falha ao carregar algum dos arquivos");
        } catch (CabecalhoEsgotadoException ex) {
            TelasPopup.mostrarMensagem(
                    "Não é possível adicionar mais arquivos neste archive"
            );
        }

        atualizarListaArquivos();

    }//GEN-LAST:event_botaoInserirActionPerformed

    private void botaoApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoApagarActionPerformed
        try {
            for (Integer indice : indicesSelecionados) {
                String nome = conteudoLista.get(indice).getKey();
                ControladorArchive.apagarArquivo(nome);
            }

            atualizarListaArquivos();
        } catch (IOException | CabecalhoEsgotadoException ex) {
            TelasPopup.mostrarMensagem("Falha ao apagar algum dos arquivos");
        }

        atualizarListaArquivos();
    }//GEN-LAST:event_botaoApagarActionPerformed

    private void botaoAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAtualizarActionPerformed
        atualizarListaArquivos();
    }//GEN-LAST:event_botaoAtualizarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoApagar;
    private javax.swing.JButton botaoAtualizar;
    private javax.swing.JButton botaoExtrair;
    private javax.swing.JButton botaoInserir;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lista;
    // End of variables declaration//GEN-END:variables
}
